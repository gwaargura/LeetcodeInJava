package LeetCode.Medium;

/*
* STATUS: DONE
* OPTIMIZED: 20%
* DIFFICULTY: MEDIUM
*
* Link: https://leetcode.com/problems/longest-palindromic-substring
*
* */
public class LongestPalindromicSubstring {

    // THIS CODE IS GENERATED BY CHATGPT
    // OPTIMIZED: 100%
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }

//    public String longestPalindrome(String s) {
//        String output = "";
//        int length = 0;
//        for (int i = 0; i < s.length(); i++) {
//            for (int j = i; j <= s.length(); j++) {
//                String sub = s.substring(i, j);
//                if (isPalindrome(sub)) {
//                    if (sub.length() > length) {
//                        output = sub;
//                        length = output.length();
//                    }
//                }
//            }
//        }
//        return output;
//    }
//
//    public boolean isPalindrome(String s) {
//        for (int i = 0; i < s.length() / 2; i++) {
//            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
//                return false;
//            }
//        }
//        return true;
//    }

    public static void main(String[] args) {
        LongestPalindromicSubstring l = new LongestPalindromicSubstring();
        System.out.println(l.longestPalindrome("abb"));
    }
}
