package LeetCode.Medium;

/*
* STATUS: DONE
* OPTIMIZED: 5%
* DIFFICULTY: MEDIUM
* Link: https://leetcode.com/problems/grumpy-bookstore-owner/?envType=daily-question&envId=2024-06-21
*
* */


public class GrumpyBookStoreOwner {
    public static int maxSatisfied(int[] customers, int[] grumpy, int minutes) {
        for(int i = 0; i < customers.length; i++) {
            if(grumpy[i] == 0){
                grumpy[i] = 1;
            } else if(grumpy[i] == 1){
                grumpy[i] = 0;
            }
        }
        int max = 0;
        if(customers.length == minutes){
            for(int i = 0; i < customers.length; i++){
                max = max + customers[i];
            }
            return max;
        }
        for(int i = 0; i <= customers.length - minutes; i++) {
            int total = 0;
            // add all in minutes range
            for(int j = i; j < i + minutes; j++) {
                total = total + customers[j];
            }
            // ok

            // add from the left
            for(int j = 0; j < i; j++) {
                total = total + customers[j] * grumpy[j];
            }
            // add from the right
            for(int j = i + minutes; j < customers.length; j++) {
                total = total + customers[j] * grumpy[j];
            }
            if(total > max) {
                max = total;
            }
        }
        return max;
    }


    public static void swap(int[] array, int index1, int index2) {
        int temp = array[index1];
        array[index1] = array[index2];
        array[index2] = temp;
    }

    public static void printArray(int[] array) {
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] a = {1,0,1,2,1,1,7,5};
        int[] b = {0,1,0,1,0,1,0,1};
        int c = 3;
        System.out.println("TEST CASE 1: ");
        System.out.println("Expected value: 16" );
        System.out.println(maxSatisfied(a, b, c));

        int[] a1 = {1};
        int[] b1 = {0};
        int c1 = 1;
        System.out.println("TEST CASE 2: ");
        System.out.println("Expected value: 1" );
        System.out.println(maxSatisfied(a1, b1, c1));


        int[] a3 = {4, 10, 10};
        int[] b3 = {1, 1, 0};
        int c3 = 2;
        System.out.println("TEST CASE 3: ");
        System.out.println("Expected value: 24" );
        System.out.println(maxSatisfied(a3, b3, c3));

        int[] a5 = {5,8};
        int[] b5 = {0, 1};
        int c5 = 1;
        System.out.println("TEST CASE 4: ");
        System.out.println("Expected value: 13" );
        System.out.println(maxSatisfied(a5, b5, c5));

        int[] a6 = {10, 1, 7};
        int[] b6 = {0, 0, 0};
        int c6 = 2;
        System.out.println("TEST CASE 5: ");
        System.out.println("Expected value: 18" );
        System.out.println(maxSatisfied(a6, b6, c6));
    }

    /*
    * THIS CODE IS GENERATED BY CHATGPT
    * OPTIMIZED: 92%

    public static int maxSatisfied(int[] customers, int[] grumpy, int X) {
        int n = customers.length;
        int initialSatisfaction = 0;

        // Calculate the initial satisfaction without using the technique
        for (int i = 0; i < n; i++) {
            if (grumpy[i] == 0) {
                initialSatisfaction += customers[i];
            }
        }

        // Calculate the additional satisfaction by using the technique
        int additionalSatisfaction = 0;
        int maxAdditionalSatisfaction = 0;

        // Initial window of size X
        for (int i = 0; i < X; i++) {
            if (grumpy[i] == 1) {
                additionalSatisfaction += customers[i];
            }
        }

        maxAdditionalSatisfaction = additionalSatisfaction;

        // Slide the window across the array
        for (int i = X; i < n; i++) {
            if (grumpy[i] == 1) {
                additionalSatisfaction += customers[i];
            }
            if (grumpy[i - X] == 1) {
                additionalSatisfaction -= customers[i - X];
            }

            maxAdditionalSatisfaction = Math.max(maxAdditionalSatisfaction, additionalSatisfaction);
        }

        return initialSatisfaction + maxAdditionalSatisfaction;
    }
     */
}
