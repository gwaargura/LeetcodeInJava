package LeetCode.Hard;

/*
* STATUS: DONE
* OPTIMIZED: 20%
* DIFFICULTY: HARD
*
* Write function to support regex
*
* Link: https://leetcode.com/problems/regular-expression-matching
*
* */
public class RegularExpressionMatching {

    // THIS CODE WAS GENERATED BY CHATGPT
    // OPTIMZED: 100%
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();

        // dp[i][j] means if s[0...i-1] matches p[0...j-1]
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;

        // Deals with patterns like a*, a*b*, a*b*c* etc.
        for (int j = 2; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p.charAt(j - 1) == '*') {
                    // Two cases:
                    // 1. '*' counts as zero of the preceding element
                    // 2. '*' counts as one or more of the preceding element
                    dp[i][j] = dp[i][j - 2] ||
                            (dp[i - 1][j] &&
                                    (s.charAt(i - 1) == p.charAt(j - 2) || p.charAt(j - 2) == '.'));
                } else {
                    // Direct match or '.' wildcard match
                    dp[i][j] = dp[i - 1][j - 1] &&
                            (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '.');
                }
            }
        }

        return dp[m][n];
    }
//    public boolean isMatch(String s, String p) {
//        try {
//            if (s.matches(p)) {
//                return true;
//            }
//            return false;
//        } catch (Exception e) {
//            for (int i = 0; i < p.length() - 1; i++) {
//                int j = i + 1;
//                if (p.charAt(i) == '*' && p.charAt(j) == '*') {
//                    p = p.substring(0, j) + p.substring(j + 1);
//                    i--;
//                }
//            }
//            if (s.matches(p)) {
//                return true;
//            }
//            return false;
//        }
//    }

    public static void main(String[] args) {
        RegularExpressionMatching r = new RegularExpressionMatching();
        System.out.println(r.isMatch("aab", "c*a*b"));
        System.out.println(r.isMatch("abc", "a***abc"));
    }
}
